#!/bin/bash
####################################################
#               COMPILATION JOB                    #
####################################################

# This script assumes default compilation options, to
# change those options : 
# it can either be  edited to add your own options
# or take into account the following 
# environment variables for compilation choices :
#
# CROCO_NETCDFLIB      : netcdf library
# CROCO_NETCDFINC      : netcdf include 
# CROCO_PRISM_ROOT_DIR : OASIS-MCT directory 
# CROCO_XIOS_ROOT_DIR  : XIOS directory
#
# CROCO_CFT1           : compiler
# CROCO_FFLAGS1        : compilation otpions
#
# Note that environment variables overwrite hard-coded
# options

#
# set source, compilation and run directories
#
SOURCE=../croco/OCEAN
SCRDIR=./Compile
RUNDIR=`pwd`
ROOT_DIR=$SOURCE/..
#
# determine operating system
#
OS=`uname`
echo "OPERATING SYSTEM IS: $OS"

#
# compiler options
#
FC=gfortran

#
# set MPI directories if needed
#
MPIF90="mpif90"
MPILIB=""
MPIINC=""

#
# set NETCDF directories
#
#-----------------------------------------------------------
# Use : 
#-lnetcdf           : version netcdf-3.6.3                --
#-lnetcdff -lnetcdf : version netcdf-4.1.2                --
#-lnetcdff          : version netcdf-fortran-4.2-gfortran --
#-----------------------------------------------------------
#
#NETCDFLIB="-L/usr/local/lib -lnetcdf"
#NETCDFINC="-I/usr/local/include"
NETCDFLIB=$(nf-config --flibs)
NETCDFINC=-I$(nf-config --includedir)

#
# set OASIS-MCT (or OASIS3) directories if needed
#
PRISM_ROOT_DIR=../../../oasis3-mct/compile_oa3-mct

#
# set XIOS directory if needed
#
XIOS_ROOT_DIR=$HOME/xios-1.0
#
# END OF USER'S MODIFICATIONS
####################################################
#
# Use GNU Make command, else make
#
MAKE=gmake
which $MAKE > /dev/null 2>&1 || MAKE=make

#
# clean scratch area
# quite radical, force to recompile everything
# during a debug period, we may want to recompile
# only files that have changed
#rm -rf $SCRDIR
#mkdir $SCRDIR

if [ -d $SCRDIR ] ; then
    echo "${SCRDIR} exists"
else
    echo "create ${SCRDIR}"
    mkdir $SCRDIR
fi
#
# AGRIF sources directory
#
AGRIF_SRC=${ROOT_DIR}/AGRIF

#
# NHMG sources directory
#
NHMG_SRC=${ROOT_DIR}/NHMG


#
# copy SOURCE code
# update and time stamp preserve to allow MAKE to recompile only what's needed
#
COPY="cp -pu"

ls ${SOURCE}/*.F               > /dev/null  2>&1 && ${COPY} ${SOURCE}/*.F   $SCRDIR
ls ${SOURCE}/*.F90             > /dev/null  2>&1 && ${COPY} ${SOURCE}/*.F90 $SCRDIR
ls ${SOURCE}/*.h               > /dev/null  2>&1 && ${COPY} ${SOURCE}/*.h   $SCRDIR
ls ${SOURCE}/Make*             > /dev/null  2>&1 && ${COPY} ${SOURCE}/Make* $SCRDIR
ls ${SOURCE}/jobcomp           > /dev/null  2>&1 && ${COPY} ${SOURCE}/jobcomp $SCRDIR
ls ${SOURCE}/amr.in            > /dev/null  2>&1 && ${COPY} ${SOURCE}/amr.in $SCRDIR
ls ${AGRIF_SRC}                > /dev/null  2>&1 && ${COPY} -r ${AGRIF_SRC} $SCRDIR
ls ${ROOT_DIR}/XIOS/*.F        > /dev/null  2>&1 && ${COPY} ${ROOT_DIR}/XIOS/*.F $SCRDIR
ls ${ROOT_DIR}/PISCES/*        > /dev/null  2>&1 && ${COPY} ${ROOT_DIR}/PISCES/* $SCRDIR
ls ${ROOT_DIR}/PISCES/SED/*    > /dev/null  2>&1 && ${COPY} ${ROOT_DIR}/PISCES/SED/* $SCRDIR
ls ${ROOT_DIR}/PISCES/kRGB61*  > /dev/null  2>&1 && ${COPY} ${ROOT_DIR}/PISCES/kRGB61* $RUNDIR
ls ${NHMG_SRC}                 > /dev/null  2>&1 && ${COPY} -r ${NHMG_SRC} $SCRDIR

if [[ -e "namelist_pisces" ]] ; then
        echo "  file namelist_pisces exists in Run directory"
else
        ${COPY} -f ${ROOT_DIR}/PISCES/namelist_pisces* $RUNDIR
        echo "  file namelist_pisces copied from source directory"
fi
#
# overwrite with local files
# okay, here we really want the user scripts to overwrite the default ones from CROCO
# keeping the time stamp (-p) makes MAKE smarter
COPY="\cp -pf"
ls *.F90   > /dev/null  2>&1 && ${COPY} *.F90 $SCRDIR
ls *.F     > /dev/null  2>&1 && ${COPY} *.F $SCRDIR
ls *.h     > /dev/null  2>&1 && ${COPY} *.h $SCRDIR
ls *.h90   > /dev/null  2>&1 && ${COPY} *.h90 $SCRDIR
ls Make*   > /dev/null  2>&1 && ${COPY} Make* $SCRDIR
ls jobcomp > /dev/null  2>&1 && ${COPY} jobcomp $SCRDIR

# Change directory
#
cd $SCRDIR
#
# generates LDFLAGS1 according to users notifications
#
LDFLAGS1="${CROCO_NETCDFLIB-$NETCDFLIB}"
CPPFLAGS1="${CROCO_NETCDFINC-$NETCDFINC} -ICROCOFILES/AGRIF_INC"
#
# Set compilation options
#
if [[ $OS == Linux || $OS == Darwin ]] ; then           # ===== LINUX =====
	if [[ $FC == ifort || $FC == ifc ]] ; then
		CPP1="cpp -traditional -DLinux -DIfort"
		CFT1=ifort
		FFLAGS1="-O3 -fno-alias -i4 -r8 -fp-model precise"
#                FFLAGS1="-O0 -g -i4 -r8 -traceback -check all -check bounds \
#                       -check uninit -CA -CB -CS -ftrapuv -fpe1"
		LDFLAGS1="$LDFLAGS1"
	elif [[ $FC == gfortran ]] ; then
		CPP1="cpp -traditional -DLinux"
		CFT1=gfortran
		FFLAGS1="-O3 -fdefault-real-8 -fdefault-double-8"
#		 FFLAGS1="-O0 -g -fdefault-real-8 -fdefault-double-8 -fbacktrace \
#			-fbounds-check -finit-real=nan -finit-integer=8888"
		LDFLAGS1="$LDFLAGS1"
	fi
elif [[ $OS == CYGWIN_NT-10.0 ]] ; then  # ======== CYGWIN =======
        CPP1="cpp -traditional -DLinux"
        CFT1="gfortran"
        FFLAGS1="-O4 -fdefault-real-8 -fdefault-double-8 -march=native -mtune=native"
elif [[ $OS == AIX ]] ; then           # ===== IBM =====
	CPP1="cpp"
	CFT1="xlf95 -I$HOME/include/"
	MAKEAGRIF="Makefile.ibm.64"
	FFLAGS1="-q64 -qwarn64 -qfixed -qrealsize=8 -qintsize=8 -qhot \
			-qalias=noaryovrlp -qthreaded -O3 -qarch=pwr4 -qtune=pwr4 -qunroll=yes"
else
	echo "Unknown Operating System"
	exit
fi
#
# determine if AGRIF compilation is required
#
unset COMPILEAGRIF
echo "Checking COMPILEAGRIF..."
if $($CPP1 testkeys.F | grep -i -q agrifisdefined) ; then
	echo " => AGRIF activated"
	COMPILEAGRIF=TRUE
	FFLAGS1="$FFLAGS1 -IAGRIF"
	LDFLAGS1="-LAGRIF -lagrif $LDFLAGS1"
# we use the AGRIF Makedefs.generic definition
	cp -f Makedefs.generic.AGRIF Makedefs.generic
fi

#
# determine if MPI compilation is required
#
unset COMPILEMPI
echo "Checking COMPILEMPI..."
if $($CPP1 testkeys.F | grep -i -q mpiisdefined) ; then
	echo " => MPI activated"
	COMPILEMPI=TRUE
	LDFLAGS1="$LDFLAGS1 $MPILIB"
	CPPFLAGS1="$CPPFLAGS1 $MPIINC"
	FFLAGS1="$FFLAGS1 $MPIINC"
	CFT1="${MPIF90}"
fi
#
# Determine if NHMG is required
# and check if a configuration submission is needed.
# To force a configuration submission, 
# please remove the "config.log" file in $NHMG_WORK
#
echo ""
echo "*****************************"
echo "** Checking COMPILENHMG... **"
echo "*****************************"
NHMG_WORK=${SCRDIR%/*}/NHMG
# Transform relative path to absolute path (if needed).
# Because configure command accept only absolute path.
NHMG_WORK=`readlink -f ${NHMG_WORK}`
NHMGPATH=$NHMG_WORK

# NHMG_LIB is where the dynamic library libnhmg.so will be stored.
# The user needs to have its shell aware of this path before
# execution. This is done by adding this path to the LD_LIBRARY_PATH
# environement variable
NHMG_LIB=$RUNDIR/nhmg_lib

NHMG_SRCDIR=$NHMG_WORK
echo "NHMG_SRCDIR is ${NHMG_SRCDIR}"
if $($CPP1 testkeys.F | grep -i -q nhmgisdefined) ; then
    if [[ $COMPILEAGRIF ]] ; then
        echo ""
        echo "*******************************************"
        echo "** You CAN'T use AGRIF and NHMG together **"
        echo "*******************************************"
        echo ""
        exit
    fi
    if [[ ! $COMPILEMPI ]] ; then
        echo ""
        echo "******************************************"
        echo "** You have to activate MPI to use NHMG **"
        echo "******************************************"
        echo ""
        exit
    fi
	echo "=> NHMG key is activated in cppdefs.h file"

    # The NHMG library will be installed in $NHMG_LIB

    # Check if a config.log file exist in CROCO's NHMG directory?
    if [[ -f ${NHMG_WORK}/config.log ]] ; then

        # Check if exit = 0 in the CROCO's NHMG config.log file ?
        oexit=`grep -e 'exit' ${NHMG_SRCDIR}/config.log | grep -Po 'exit \K[^ ]+'`
        # if oexit='0' no configuration is needed except if options are different
        if [[ ${oexit} == '0' ]] ; then   
           CONFIGNHMG=FALSE

           # Test if configure options are similar or different !
           # If one of them is different a configuration step will be made.
           #
           # Test prefix
           oprefix=`grep -e '$ ./configure' ${NHMG_SRCDIR}/config.log | grep -Po 'prefix=\K[^ ]+'`
           if [[ ! ${oprefix} == ${NHMGPATH} ]] ; then
               echo "NHMGPATH is different: ${oprefix} <=> ${NHMGPATH}"       
               CONFIGNHMG=TRUE
           fi
           # Test the mpi fortran compiler
           ompif90=`grep -e '$ ./configure' ${NHMG_SRCDIR}/config.log | grep -Po 'MPI_F90=\K[^ ]+'`
           if [[ ! ${ompif90} == ${MPIF90} ]] ; then 
               echo "MPIF90 is different: ${ompif90} <=> ${MPIF90}"  
               CONFIGNHMG=TRUE
           fi
           # Test the mpi include path
           ompiinc=`grep -e '$ ./configure' ${NHMG_SRCDIR}/config.log | grep -Po 'MPI_INC=\K[^ ]+'`
           dummy="${MPIINC%% *}"
           if [[ ! ${ompiinc} == ${dummy} ]] ; then               
               echo "MPIINC is different: ${ompiinc} <=> ${dummy}" 
               CONFIGNHMG=TRUE
           fi
           # test the mpi library path
           ompilib=`grep -e '$ ./configure' ${NHMG_SRCDIR}/config.log | grep -Po 'MPI_LIB=\K[^ ]+'`
           dummy="${MPILIB%% *}"
           if [[ ! ${ompilib} == ${dummy} ]] ; then
               echo "MPILIB is different: ${ompilib} <=> ${dummy}"
               CONFIGNHMG=TRUE
           fi
        else
           echo "oexit: $oexit"
	       CONFIGNHMG=TRUE       # else configuration is needed
        fi
    else
       CONFIGNHMG=TRUE           # no config.log file => submit ./configure
    fi
    echo 'Configure NHMG: '${CONFIGNHMG}

    # Compilation will be made and managed by the command make
	COMPILENHMG=TRUE
    echo 'Compile NHMG: '${COMPILENHMG}

	LDFLAGS1=" $LDFLAGS1 -L${NHMG_LIB} -lnhmg"
	FFLAGS1="$FFLAGS1 -I${NHMGPATH}/include"
fi

#
# Take environment variables for compiler and options
#
FFLAGS1=${CROCO_FFLAGS1-$FFLAGS1}
CFT1=${CROCO_CFT1-$CFT1}

#
# determine if XIOS compilation is required
#
unset COMPILEXIOS
echo "Checking COMPILEXIOS..."
XIOS_ROOT_DIR=${CROCO_XIOS_ROOT_DIR-$XIOS_ROOT_DIR}
if $($CPP1 testkeys.F | grep -i -q xiosisdefined) ; then
        echo " => XIOS activated"
        COMPILEXIOS=TRUE
        LDFLAGS1="$LDFLAGS1 $XIOS_ROOT_DIR/lib/libxios.a  -lstdc++ -lnetcdff"
        CPPFLAGS1="$CPPFLAGS1 -I$XIOS_ROOT_DIR/inc"
        FFLAGS1="$FFLAGS1 -I$XIOS_ROOT_DIR/inc"
        ln -fs $XIOS_ROOT_DIR/bin/xios_server.exe $RUNDIR/.
        $CPP1 -P -traditional -imacros cppdefs.h  ${ROOT_DIR}/XIOS/field_def.xml_full $RUNDIR/field_def.xml
        $CPP1 -P -traditional -imacros cppdefs.h  ${ROOT_DIR}/XIOS/domain_def.xml $RUNDIR/domain_def.xml
        $CPP1 -P -traditional -imacros cppdefs.h  ${ROOT_DIR}/XIOS/file_def.xml $RUNDIR/file_def.xml
        $CPP1 -P -traditional -imacros cppdefs.h  ${ROOT_DIR}/XIOS/iodef.xml $RUNDIR/iodef.xml
fi

#
# determine if OASIS compilation is required
#
unset COMPILEOASIS
echo "Checking COMPILEOASIS..."
PRISM_ROOT_DIR=${CROCO_PRISM_ROOT_DIR-$PRISM_ROOT_DIR}
if $($CPP1 testkeys.F | grep -i -q oacplisdefined) ; then
    echo " => OASIS activated"
    CHAN=MPI1
    LIBPSMILE="${PRISM_ROOT_DIR}/lib/libpsmile.${CHAN}.a \
		${PRISM_ROOT_DIR}/lib/libmct.a  \
		${PRISM_ROOT_DIR}/lib/libmpeu.a \
		${PRISM_ROOT_DIR}/lib/libscrip.a"
    PSMILE_INCDIR="-I${PRISM_ROOT_DIR}/build/lib/psmile.${CHAN} \
		-I${PRISM_ROOT_DIR}/build/lib/mct"
    COMPILEOASIS=TRUE
    LDFLAGS1="$LDFLAGS1 $LIBPSMILE $NETCDFLIB"
    CPPFLAGS1="$CPPFLAGS1 ${PSMILE_INCDIR} $NETCDFINC"
    FFLAGS1="$FFLAGS1 ${PSMILE_INCDIR} $NETCDFINC"
fi
#
# prepare and compile the library
#
if [[ $COMPILEAGRIF ]] ; then
#
# compile the AGRIF librairy
#
	if [[ $COMPILEMPI ]] ; then
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" CPPFLAGS="-DAGRIF_MPI $MPIINC" FFLAGS="$FFLAGS1"
	else
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" FFLAGS="$FFLAGS1"
	fi
	if [[ $OS == Darwin ]] ; then          # DARWIN
# run RANLIB on Darwin system
		ranlib AGRIF/libagrif.a
	fi
#
	mkdir CROCOFILES
	mkdir -p CROCOFILES/AGRIF_MODELFILES
	mkdir -p CROCOFILES/AGRIF_INC
	$CPP1 amr.in | grep -v -e ! -e '#' -e % -e '*' > CROCOFILES/amr.scrum
	mv AGRIF/conv CROCOFILES/.
	for i in *.h *.h90 ; do
		echo $i
		cat cppdefs.h $i | cpp -P | grep -v -e ! -e '#' -e % -e '*' > CROCOFILES/$i
	done
	mv -f CROCOFILES/private_scratch_AMR.h CROCOFILES/private_scratch.h
fi

#
# Configure NHMG library (if needed)
#
if [[ $CONFIGNHMG == 'TRUE' ]] ; then
    echo ""
    echo "************************"
    echo "** NHMG configuration **"
    echo "************************"
    echo "  - prefix: ", ${NHMGPATH}
    echo "  - MPI_F90:", ${MPIF90}
    echo "  - MPI_INC:", ${MPIINC}
    echo "  - MPI_LIB:", ${MPILIB}
    wwa=`pwd`
    cd NHMG
    echo $wwa
    echo `pwd`
    cp -r autotools/* .
    automake --add-missing
    aclocal; automake; autoconf
    #
    # To know "configure" available options
    # please enter "../NHMG/configure --help | grep -e '--enable-'"
    # If you change here an option, you have to remove the config.log file
    # in the CROCO's NHMG directory (if it is present).
    # "rm ../NHMG/config.log"
    #
    # Options "--prefix=","--enable-mpicroco","MPI_F90=","MPI_INC", "MPI_LIB"
    # have to be present and set (they are not options :-)
    #
    ./configure --prefix="${NHMGPATH}" --enable-netcdf --libdir=${NHMG_LIB} \
        --enable-mpicroco MPI_F90="${MPIF90}" MPI_INC="${MPIINC}" MPI_LIB="${MPILIB}"
#  Enables netcdf for NHMG development
#   ./configure --prefix="${NHMGPATH}" --enable-netcdf \
#       --enable-mpicroco MPI_F90="${MPIF90}" MPI_INC="${MPIINC}" MPI_LIB="${MPILIB}"
    ${MAKE} clean
    cd ${wwa}
fi

#
# Compile NHMG library and install it in $NHMG_LIB
#
if [[ $COMPILENHMG == 'TRUE' ]] ; then
    echo ""
    echo "**********************"
    echo "** NHMG compilation **"
    echo "**********************"
    wwa=`pwd`
    cd NHMG
    # make command check timestamp source files and compile them only if it is necessary
    ${MAKE} install
    result=$?
    if [ $result == 0 ] ; then
        echo "NHMG has been correctly compiled and installed"
    else
        echo "error during the compilation of the NHMG library"
        exit 1
    fi
    cd ${wwa}
fi

#
# determine if OPENMP compilation is needed
#
unset COMPILEOMP
echo "Checking COMPILEOMP..."
if $($CPP1 testkeys.F | grep -i -q openmp) ; then
	COMPILEOMP=TRUE
	if [[ $OS == Linux || $OS == Darwin ]] ; then 
		if [[ $FC == gfortran ]] ; then
			FFLAGS1="$FFLAGS1 -fopenmp"
		elif [[ $FC == ifort || $FC == ifc ]] ; then
			FFLAGS1="$FFLAGS1 -openmp"
		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == CYGWIN_NT-10.0 ]] ; then
        FFLAGS1=="$FFLAGS1 -fopenmp"
	elif [[ $OS == AIX ]] ; then
		FFLAGS1="$FFLAGS1 -qsmp=omp"
		CFT1="xlf95_r"
	fi
fi

#
# rewrite Makedefs according to previous flags
# with openmp flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# compile croco
#
$MAKE depend
$MAKE
  
[[ -f croco  ]] && mv croco $RUNDIR
[[ -f partit ]] && mv partit $RUNDIR
[[ -f ncjoin ]] && mv ncjoin  $RUNDIR
#
#
if $($CPP1 testkeys.F | grep -i -q nhmgisdefined) ; then
    echo ""
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    echo "** Please verify your LD_LIBRARY_PATH for NHMG library. "
    echo "** You can update it using one of these two commands: "
    echo "** (csh)  setenv LD_LIBRARY_PATH \$LD_LIBRARY_PATH:${NHMG_LIB}"
    echo "** (bash) export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:${NHMG_LIB}"
    echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
fi
