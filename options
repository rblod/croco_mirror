#!/bin/sh
######################################################
#  CROCO cmake build system, under CeCILL-C
#  From SÃ©bastien Valat (INRIA) - 2023
#  CROCO website : http://www.croco-ocean.org
######################################################

######################################################
#set project name
cfg_set_projet "CROCO"

######################################################
#this is an MPI app, we directly use the mpi wrappers
#CFG_EXTRA_CC='mpicc'
#CFG_EXTRA_FORT='mpifort'

######################################################
#psyclone openacc
cfg_add_enable_option --name='psyclone-openacc' \
                      --on='-DENABLE_PSYCLONE_OPENACC=${ON}' \
                      --doc='Enable coverage report'

#openmp
cfg_add_enable_option --name='openmp' \
                      --on='-DENABLE_OPENMP=${ON}' \
                      --doc='Enable coverage report'

#psyclone venv
cfg_add_with_option   --name='netcdff' \
                      --doc='Define prefix directory to get access to NetCDF-Fortran' \
                      --var='NETCDFF_PREFIX'

#psyclone venv
cfg_add_with_option   --name='psyclone' \
                      --doc='Define venv directory to get access to psyclone & poseidon' \
                      --var='PSYCLONE_PREFIX'\
                      --on='-DENABLE_PSYCLONE_OPENACC=${ON}'

#select the case to run
cfg_add_with_option   --name='case' \
                      --doc='Define the CASE to compiler and run (look in OCEAN/config.h.in)' \
                      --var='CROCO_CASE'

######################################################
#If we want to document extra options
#CFG_CUSTOM_HELP="My custom options:"

######################################################
# here we can parse our own options if we want
# Vars available are :
#  - $arg : full argument (eg. --with-gcc=gcc)
#  - $val : value after first '=', egg 'gcc'
#  - $ON $OFF, $ENABLE, $DISABLE, $WIDTH, $WITHOUT
#cfg_parse_custom_opts()
#{
#	return 1
#}

######################################################
#pre check to ease error messages
#All cmake vars are loaded in memory as OPT_* (OPT_CMAKE_C_FLAGS)
#cfg_custom_pre_check()
#{
#	return 1
#}
